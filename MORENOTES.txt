int QUESTION_MARK(int argc, char* argv[]) { //give amount of input files, ?
//YAYZORZ
	FILE* inputfp = NULL;
    FILE* outputfp = NULL;
    char hostname[SBUFSIZE];	//char for storing the hostname?
    char errorstr[SBUFSIZE];	//
    char firstipstr[INET6_ADDRSTRLEN];
    int i;
    
    /* Check Arguments */
    if(argc < MINARGS){
		fprintf(stderr, "Not enough arguments: %d\n", (argc - 1));
		fprintf(stderr, "Usage:\n %s %s\n", argv[0], USAGE);
		return EXIT_FAILURE;
    }

//open output file
	outputfp = fopen(argv[(argc-1)], "w");
    if(!outputfp){
		perror("Error Opening Output File");
		return EXIT_FAILURE;
    }

//open input files
	for(i=1; i<(argc-1); i++){
		inputfp = fopen(argv[i], "r");
		if(!inputfp){
			sprintf(stderror, "Error Opening Input File: %s", argv[i]);	//prints error string //should print to stderror instead
			perror(errorstr);	//prints an error to terminal
			break;
		}
	//read input files
		while(fscanf(inputfp, INPUTFS, hostname) > 0){
			if(dnslookup(hostname, firstipstr, sizeof(firstipstr))
			   == UTIL_FAILURE){
			fprintf(stderr, "dnslookup error: %s\n", hostname);
			strncpy(firstipstr, "", sizeof(firstipstr));
			}
		
			//write to output file
			fprintf(outputfp, "%s,%s\n", hostname, firstipstr);
		}

		/* Close Input File */
		fclose(inputfp);
	}	

	/* Close Output File */
	fclose(outputfp);

	return EXIT_SUCCESS;

}

// Function for Request threads
void* Request(void* threadid)
{
    //Setup Local Vars and Handle void*
    long* tid = threadid;
    
    //Exit, Returning NULL
    return NULL;
}

// Function for Resolve threads
void* Resolve(void* threadid)
{
    //Setup Local Vars and Handle void*
    long* tid = threadid;
    
    //Exit, Returning NULL
    return NULL;
}

int main(int argc, char *argv[])
{
    /* void unused vars */
    (void) argc;
    (void) argv;

    /* Setup Local Vars */
    pthread_t threads[NUM_THREADS];
    int rc;
    long t;
    long cpyt[NUM_THREADS];
    
    /* Spawn NUM_THREADS threads */
    for(t=0;t<NUM_THREADS;t++){
	printf("In main: creating thread %ld\n", t);
	cpyt[t] = t;
	rc = pthread_create(&(threads[t]), NULL, PrintHello, &(cpyt[t]));
	if (rc){
	    printf("ERROR; return code from pthread_create() is %d\n", rc);
	    exit(EXIT_FAILURE);
	}
    }
    
    /* Wait for All Theads to Finish */
    for(t=0;t<NUM_THREADS;t++){
	pthread_join(threads[t],NULL);
    }
    printf("All of the threads were completed!\n");
    

    /* Last thing that main() should do */
    /* pthread_exit unnecessary due to previous join */ 
    //pthread_exit(NULL);

    return 0;
}

